1. Logic to except only integer if input var is string

    string input;

    cout <<"Enter your data: " << endl;

    cin >> input ;

    bool has_only_digits = (input.find_first_not_of( "0123456789" ) == string::npos);

    if(has_only_digits)
    {

        if( atoi(input.c_str()) < 500 )
        {
            cout << "Entered data is integer and less than 500" << endl;
        }
        cout << "Entered data is only digits " <<endl;
    }
    else
    {
        cout << "Entered data contains characters. Please insert integer value" << endl;
        return 0;
    }


2. Data Validations

int option;
  while(!(cin >> option))
        {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(),'\n');
            cout << "You entered wrong choice, Please insert number from 1 to 5" << endl;
        }



3. Signal ?Handler


    for (int i=0; i < 32; i++)
    {
        signal(i, signal_trap);
    }
static void signal_trap(int sig)
{
    if (SIGSEGV == sig)
    {
        std::cout << "Signal : SIGSEGV";
        exit(EXIT_FAILURE); // Exit with failure status on segfault.
    }
    else if ((SIGKILL == sig) || (SIGTERM == sig) || (SIGINT == sig))
    {
        std::cout << "Signal : " << ((SIGKILL == sig)?"SIGKILL":(SIGTERM == sig)?"SIGTERM":"SIGINT");
        exit_flag = 1;
    }
    else if (SIGCHLD != sig)
    {
        std::cout << "Signal : " << sig;
    }
}


4.   Install boost libraries  :https://stackoverflow.com/questions/12578499/how-to-install-boost-on-ubuntu

5. Linux Shell Scripting Site : http://linuxcommand.org/lc3_writing_shell_scripts.php


6 . https://manybutfinite.com/post/anatomy-of-a-program-in-memory/    Memory Layout 

7. http://www.bogotobogo.com/cplusplus/multithreading_pthread.php   Semaphores and threading

8. Inter Process Communication https://www.geeksforgeeks.org/inter-process-communication/

9. function pointer typedef 

typedef is used to alias types; in this case you're aliasing FunctionFunc to void(*)().

Indeed the syntax does look odd, have a look at this:

typedef   void      (*FunctionFunc)  ( );
//         ^                ^         ^
//     return type      type name  arguments:

